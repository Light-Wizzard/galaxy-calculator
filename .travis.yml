sudo: false
language: cpp
branches:
  only:
    - master

jobs:
  include:
    - os: linux
      dist: xenial
      sudo: require
      compiler: g++
      addons:
        apt:
          sources:
            - sourceline: ppa:ubuntu-toolchain-r/test
            - sourceline: ppa:beineri/opt-qt-5.12.6-xenial
          packages:
            - g++-7
            - git
      env:
        - APPIMAGE="true"
        - MATRIX_EVAL="CC=gcc-7 && CXX=g++-7"
    - os: linux
      dist: xenial
      sudo: require
      services: docker
      env: WEBASM="true"
    - os: osx
      osx_image: xcode11.0
      compiler: clang
      env:
        - DMG="true"
        - MATRIX_EVAL="COMPILER=clang++"

before_install:
    - if [ -z "${GITHUB_TOKEN}" ]; then
        export GITHUB_TOKEN="${github_token}";
        echo "Add GITHUB_TOKEN to your Travis Settings Environment Varable with a value from Github Settings Developer Personal access tolkens";
      fi
    - if [ -z "${GITHUB_USERNAME}" ]; then
        echo "Add GITHUB_USERNAME to your Travis Settings Environment Varable with your Github User Name, the first one in the path to github.";
      fi
    - if [ -z "${GITHUB_EMAIL}" ]; then
        echo "Add GITHUB_EMAIL to your Travis Settings Environment Varable with your Github email address.";
      fi
    - if [ -z "${REPO_SLUG}" ]; then
        export REPO_SLUG="Light-Wizzard/galaxy-calculator";
        echo "Add REPO_SLUG to your Travis Settings Environment Varable with the path from your Github project, User-Name/Project-Name";
      fi
    - if [ -z "${BIN}" ]; then
        export BIN="Galaxy-Calculator";
        echo "Add BIN to your Travis Settings Environment Varable with a value from Github x";
      fi
    - if [ -z "${QTV}" ]; then
        export QTV="qt512";
        echo "Add QTV to your Travis Settings Environment Varable with the version of Qt you want to use from beineri repo, qt512";
      fi
    - if [ -z "${QT_WASM_VER}" ]; then
        export QT_WASM_VER="5.13_latest";
        echo "Add QT_WASM_VER to your Travis Settings Environment Varable with the version of Qt WASM, 5.13_latest";
      fi

install:
    - if [ ! -z "${APPIMAGE}" ]; then 
        sudo apt update -qq; 
        echo "Install qt libraries for Linux";
        sudo apt install build-essential ${QTV}base ${QTV}quickcontrols ${QTV}quickcontrols2 ${QTV}graphicaleffects ${QTV}svg ${QTV}scxml libgl1-mesa-dev; 
        export ARTIFACT="${BIN}-travis-x86_64.AppImage";
        export ARTIFACT_ZSYNC="${BIN}-travis-x86_64.AppImage.zsync";
      fi
    - if [ ! -z "${DMG}" ]; then 
        echo "Download last version of Qt with brew for Mac";
        brew update > /dev/null; 
        brew install qt5; 
        chmod -R 755 /usr/local/opt/qt5/*; 
        export QTDIR="/usr/local/opt/qt5"; export PATH="${QTDIR}/bin:$PATH"; export ARTIFACT="${BIN}*.dmg"; 
      fi
      
script:
    - eval "${MATRIX_EVAL}"
    - if [ ! -z "${APPIMAGE}" ]; then
        echo "Load Qt env Make Linux AppImage in PWD~=/home/travis/build/[secure]/${BIN}";
        echo "Home (/home/travis/)=$HOME";
        ls "${HOME}/";
        source /opt/qt*/bin/qt*-env.sh;
        echo "make directory build and change directory to it";
        mkdir -vp build && cd build;
        echo "cd build";
        ls;
        qmake ..;
        make;
        echo "Create project folder=/home/travis/build/[secure]/${BIN}/build/deploy/build/project";
        echo "Home build ${HOME}/build";
        ls "${HOME}/build";
        mkdir -vp project; mkdir -vp project/usr;  mkdir -vp project/usr/bin; mkdir -vp project/usr/share;
        mkdir -vp project/usr/share/applications; mkdir -vp project/usr/doc; mkdir -vp project/usr/share/doc/libc6;
        cp -v /usr/share/doc/libc6/copyright project/usr/share/doc/libc6/copyright;
        echo "Copy files over";
        cp -vr ../usr project/;
        ls project/usr/share/applications/;
        echo "Moving executable";
        ls;
        mv -v "$BIN" project/usr/bin/; 
        echo "Donwload and run linuxdeployqt continuous... TRAVIS_BUILD_DIR=/home/travis/build/[secure]/galaxy-calculator"; 
        ls "$TRAVIS_BUILD_DIR/project";
        ls project/usr/bin/;
        cd project/;
        export MY_PROJECT="${PWD}";
        echo "MY_PROJECT=/home/travis/build/[secure]/galaxy-calculator/build/project";
        ls;
        echo "ls";
        wget -c -nv "https://github.com/probonopd/linuxdeployqt/releases/download/continuous/linuxdeployqt-continuous-x86_64.AppImage";
        chmod a+x linuxdeployqt-continuous-x86_64.AppImage;
        unset QTDIR; unset QT_PLUGIN_PATH ; unset LD_LIBRARY_PATH;
        export VERSION=travis;
        ./linuxdeployqt-continuous-x86_64.AppImage "${MY_PROJECT}/usr/share/applications/${BIN}.desktop" -extra-plugins=iconengines,imageformats -verbose=2 -qmldir="${TRAVIS_BUILD_DIR}/qml" -appimage;
        echo "Completed LinuxDeployQt";
        ls;
      fi
    - if [ ! -z "${DMG}" ]; then
        echo "Build project for Mac in /home/travis/build/[secure]/${BIN}";
        mkdir build && cd build;
        qmake ..;
        make;
        echo "Run macdeployqt";
        macdeployqt "${BIN}.app/" -qmldir=../qml -dmg;
        find . | grep dmg;
      fi
    - if [ ! -z "${WEBASM}" ]; then
        echo "Build WEBASM in /home/travis/build/[secure]/${BIN}";
        git remote set-url origin https://${GITHUB_TOKEN}@github.com/${GITHUB_USERNAME}/${BIN};
        git config remote.origin.fetch "+refs/heads/*:refs/remotes/origin/*";
        git fetch --all;
        git config --global user.name "${GITHUB_USERNAME}";
        git config --global user.email "${GITHUB_EMAIL}";
        echo "WEBASM make build folder and run docker";
        mkdir build;
        docker run --rm -v "${PWD}:/project/source" -v "${PWD}/build:/project/build" maukalinow/qtwasm_builder:${QT_WASM_VER};
        rm -rf build/{Makefile,*.o,*.cpp};
        git checkout --track origin/gh-pages;
        mv -v build/* .;
        rm -rf build;
        sudo mv -v "${BIN}.html" index.html;
        echo "Created WEBASM";
        ls -lh;
        git add --all;
        git commit -sm "Update WebAssembly";
      fi    

after_success:
    - if [ "${TRAVIS_PULL_REQUEST}" != false ] || [ "${TRAVIS_BRANCH}" != "master" ]; then
        echo "This is not the master branch, no deploy will be done";
        travis_terminate 0;
      fi
    - wget -c https://raw.githubusercontent.com/${GITHUB_USERNAME}/${BIN}/master/tools/upload.sh;
    - if [ ! -z "${APPIMAGE}" ]; then bash ./upload.sh ${HOME}/build/project/tools/${ARTIFACT}; bash ./upload.sh ${HOME}/build/project/tools/${ARTIFACT_ZSYNC}; fi
    - if [ ! -z "${DMG}" ]; then bash ./upload.sh $ARTIFACT; fi
    - if [ ! -z "${WEBASM}" ]; then git push origin gh-pages; fi
    
